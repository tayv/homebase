---
import type { ImageMetadata } from "astro"

interface Props {
  /** Source URL of the image */
  src: string | ImageMetadata
  /** Alt text for accessibility */
  alt: string
  /** Number of glitch effect layers (min: 1, max: 50) */
  layers?: number
  /** Pixel offset for the glitch effect (min: 1, max: 20) */
  offset?: number
  /** Additional CSS classes */
  className?: string
  /** Enable/disable scroll-based animation */
  enableScrollEffect?: boolean
  /** Minimum height for each glitch slice (in pixels) */
  minSliceHeight?: number
}

const {
  src,
  alt,
  layers: rawLayers = 20,
  offset: rawOffset = 4,
  className = "",
  enableScrollEffect = true,
  minSliceHeight = 30,
} = Astro.props

// Get the actual src URL whether it's a string or ImageMetadata
const imgSrc = typeof src === "string" ? src : src.src

// Validate and clamp values
const layers = Math.max(1, Math.min(50, rawLayers))
const offset = Math.max(1, Math.min(20, rawOffset))

// Define dramatic shift presets for glitch effect
const shiftPresets = [-60, 45, -50, 55, -40, 45, -55, 50] as const
type ShiftPreset = (typeof shiftPresets)[number]

interface LayerEffect {
  shift: number
  top: number
  height: number
}

// Calculate the minimum number of layers based on viewport height and minimum slice height
const calculateOptimalLayers = (layerCount: number): number => {
  const viewportHeight =
    typeof window !== "undefined" ? window.innerHeight : 800
  const maxLayers = Math.floor(viewportHeight / minSliceHeight)
  return Math.min(layerCount, maxLayers)
}

// Memoize layer effects calculation for better performance
const generateLayerEffects = (layerCount: number): LayerEffect[] => {
  const optimalLayers = calculateOptimalLayers(layerCount)
  return Array.from({ length: optimalLayers * 2 }).map((_, index) => {
    const baseShift = shiftPresets[index % shiftPresets.length]
    const randomShift = baseShift + (Math.random() * 10 - 5) // Â±5px variation
    const top = (index * 100) / (optimalLayers * 2)

    return {
      shift: randomShift,
      top,
      height: Math.max(100 / (optimalLayers * 2), minSliceHeight / 8),
    }
  })
}

const layerEffects = generateLayerEffects(layers)
---

<div
  class="glitch-wrapper fixed inset-0 h-[100dvh] w-screen touch-none overscroll-none"
>
  <div
    class:list={["glitch-container h-full min-h-[100dvh] w-full", className]}
  >
    <!-- Base image layer -->
    <img
      src={imgSrc}
      alt={alt}
      loading="eager"
      decoding="async"
      class="contrast-120 absolute inset-0 h-full min-h-[100dvh] w-full object-cover brightness-110"
      onerror="this.classList.add('error')"
    />

    <!-- Stacked layers -->
    <div
      class="glitch-layers relative h-full"
      data-enable-scroll={enableScrollEffect}
    >
      {
        layerEffects.map((effect, index) => (
          <div
            class="glitch-slice absolute left-0 right-0 w-full"
            data-index={index}
            style={{
              top: `${effect.top}%`,
              height: `${effect.height}%`,
              overflow: "hidden",
              "--delay": `${index * 0.1}s`,
              "--shift": `${effect.shift}px`,
              "--layer-index": index,
            }}
          >
            <div
              class="glitch-inner absolute -left-[25vw] h-full w-[150vw]"
              style={{
                transform: `translateX(var(--shift))`,
              }}
            >
              <img
                src={imgSrc}
                aria-hidden="true"
                loading="lazy"
                decoding="async"
                class="h-full w-full object-cover"
                style={{
                  objectPosition: `center ${effect.top}%`,
                }}
                onerror="this.classList.add('error')"
              />
            </div>
          </div>
        ))
      }
    </div>

    <!-- Static noise overlay -->
    <div class="noise absolute inset-0 opacity-50 mix-blend-soft-light"></div>
  </div>
</div>

<script>
  let ticking = false
  let lastScrollY = window.scrollY
  let scrollTimeout: number | null = null
  let isScrolling = false

  function updateGlitch() {
    const glitchLayers = document.querySelector(".glitch-layers")
    const isEnabled =
      glitchLayers?.getAttribute("data-enable-scroll") === "true"

    if (!isEnabled) {
      ticking = false
      return
    }

    const currentScrollY = window.scrollY
    const scrollingDown = currentScrollY > lastScrollY
    lastScrollY = currentScrollY

    // Clear any existing scroll timeout
    if (scrollTimeout) {
      clearTimeout(scrollTimeout)
    }

    // Set isScrolling to true and start a new timeout
    isScrolling = true
    scrollTimeout = window.setTimeout(() => {
      isScrolling = false
      // Trigger one final update when scrolling stops
      if (scrollingDown) {
        requestAnimationFrame(updateGlitch)
      }
    }, 100) // Reduced to 100ms for better responsiveness

    if (!scrollingDown) {
      // Reset transforms when scrolling up
      document.querySelectorAll(".glitch-slice").forEach((slice) => {
        const element = slice as HTMLElement
        element.style.transform = "translateX(0px)"
      })
      ticking = false
      return
    }

    // Only apply the effect if we're not rapidly scrolling
    if (!isScrolling || scrollingDown) {
      const scrollPercent =
        window.scrollY /
        (document.documentElement.scrollHeight - window.innerHeight)
      const slices = document.querySelectorAll(".glitch-slice")

      slices.forEach((slice) => {
        const element = slice as HTMLElement
        const index = parseInt(element.dataset.index || "0")
        const isEven = index % 2 === 0
        // Reduce the offset magnitude during scrolling
        const offsetMultiplier = isScrolling ? 0.8 : 1
        const offset =
          Math.sin(scrollPercent * Math.PI * 2) * 8 * offsetMultiplier
        const translateX = isEven ? offset : -offset
        element.style.transform = `translateX(${translateX}px)`
      })
    }

    ticking = false
  }

  window.addEventListener(
    "scroll",
    () => {
      if (!ticking) {
        window.requestAnimationFrame(updateGlitch)
        ticking = true
      }
    },
    { passive: true }
  )

  // Cleanup function to clear timeout when component is destroyed
  document.addEventListener("astro:before-swap", () => {
    if (scrollTimeout) {
      clearTimeout(scrollTimeout)
    }
  })

  // Initial call to set correct state
  updateGlitch()
</script>

<style>
  .glitch-wrapper {
    @apply -z-10;
  }

  .glitch-container {
    @apply relative isolate;
  }

  .glitch-container::before,
  .glitch-container::after {
    @apply hidden;
  }

  .noise {
    background: url("data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noise'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noise)'/%3E%3C/svg%3E");
    @apply pointer-events-none brightness-100 contrast-[300%];
  }

  .glitch-slice {
    @apply min-h-[30px] transition-transform duration-200 ease-out;
    will-change: transform;
  }

  .glitch-inner {
    will-change: transform;
    min-height: inherit;
  }

  /* Error state styling */
  img.error {
    @apply opacity-50 grayscale;
  }

  img.error::after {
    content: "Failed to load image";
    @apply absolute inset-0 flex items-center justify-center bg-black/50 text-white;
  }
</style>
