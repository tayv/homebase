---
interface Props {
  src: string
  alt: string
  layers?: number
  offset?: number
  className?: string
}

const { src, alt, layers = 20, offset = 4, className = "" } = Astro.props

// Define dramatic shift presets for glitch effect
const shiftPresets = [-120, 80, -90, 100, -70, 85, -110, 95]

// Generate values for each layer
const layerEffects = Array.from({ length: layers * 2 }).map((_, index) => {
  const baseShift = shiftPresets[index % shiftPresets.length]
  const randomShift = baseShift + (Math.random() * 40 - 20) // Â±20px variation

  return {
    shift: randomShift,
    top: (index * 100) / (layers * 2),
    height: 100 / (layers * 2),
  }
})
---

<div
  class:list={["glitch-container fixed inset-0 h-screen w-screen", className]}
>
  <!-- Base image layer -->
  <img
    src={src}
    alt={alt}
    class="absolute inset-0 h-full w-full object-cover"
    style={{
      filter: "contrast(1.2) brightness(1.1)",
    }}
  />

  <!-- Stacked layers -->
  {
    layerEffects.map((effect, index) => (
      <div
        class="absolute left-0 right-0 w-full mix-blend-normal"
        style={{
          top: `${effect.top}%`,
          height: `${effect.height}%`,
          zIndex: index + 1,
          overflow: "hidden",
        }}
      >
        <div
          class="absolute -left-[25vw] h-full w-[150vw]"
          style={{
            transform: `translateX(${effect.shift}px)`,
          }}
        >
          <img
            src={src}
            aria-hidden="true"
            class="h-full w-full object-cover"
            style={{
              objectPosition: `center ${effect.top}%`,
            }}
          />
        </div>
      </div>
    ))
  }

  <!-- Static noise overlay (moved to top) -->
  <div
    class="noise absolute inset-0 opacity-50 mix-blend-soft-light"
    style={{ zIndex: layers * 2 + 1 }}
  >
  </div>
</div>

<style>
  .glitch-container {
    isolation: isolate;
  }

  .glitch-container::before,
  .glitch-container::after {
    display: none;
  }

  .noise {
    background: url("data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noise'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noise)'/%3E%3C/svg%3E");
    filter: contrast(300%) brightness(100%);
    pointer-events: none;
  }
</style>
