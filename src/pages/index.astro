---
import { ViewTransitions } from "astro:transitions"
import GlitchImage from "../components/GlitchImage.astro"
import CardDialog from "../components/CardDialog.astro"
import bgImage from "../images/bg-image.jpeg"

const cards = [
  {
    id: "card1",
    title: "Card One",
    content: "Some interesting content here",
    imageSrc: "/src/images/test_banner_image.webp",
    imageAlt: "Card One Image",
  },
  {
    id: "card2",
    title: "Card Two",
    content: "More engaging content",
    imageSrc: "/src/images/test_banner_image.webp",
    imageAlt: "Card Two Image",
  },
  {
    id: "card3",
    title: "Card Three",
    content: "Additional content here",
    imageSrc: "/src/images/test_banner_image.webp",
    imageAlt: "Card Three Image",
  },
  {
    id: "card4",
    title: "Card Four",
    content: "Even more content",
    imageSrc: "/src/images/test_banner_image.webp",
    imageAlt: "Card Four Image",
  },
  {
    id: "card5",
    title: "Card Five",
    content: "Interesting stuff here",
    imageSrc: "/src/images/test_banner_image.webp",
    imageAlt: "Card Five Image",
  },
  {
    id: "card6",
    title: "Card Six",
    content: "Final card content",
    imageSrc: "/src/images/test_banner_image.webp",
    imageAlt: "Card Six Image",
  },
]
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="/styles.css" />
    <!-- favicon start -->
    <link rel="icon" type="image/x-icon" href="./favicon.ico" />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="./apple-touch-icon.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="./favicon-32x32.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="./favicon-16x16.png"
    />
    <link rel="manifest" href="./site.webmanifest" />
    <!-- favicon end -->
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="theme-color" content="#5c84a3" />
    <title>Taylor's Homebase</title>
    <ViewTransitions />
  </head>
  <body class="font-['Courier'] font-mono text-white">
    <div class="fixed inset-0 -z-10">
      <GlitchImage
        src={bgImage}
        alt="Pink clouds in a dreamy sky"
        layers={9}
        minSliceHeight={80}
      />
    </div>
    <div
      class="relative z-10 flex min-h-screen flex-col items-center justify-center p-4"
    >
      <div class="glitch-wrapper">
        <div class="glitch" data-text="<Name here>">&lt;Name here&gt;</div>
      </div>

      <!-- marquee starts -->
      <div class="relative w-full overflow-hidden py-4">
        <div class="animate-marquee inline-flex">
          <ul class="flex gap-16 pr-16 text-lg">
            <li class="shrink-0 whitespace-nowrap">
              i'm a senior product designer
            </li>
            <li class="shrink-0 whitespace-nowrap">
              i've worked as an independent contributor and managed teams
            </li>
            <li class="shrink-0 whitespace-nowrap">
              i do best collaborating closely with engineers and product
              managers
            </li>
            <li class="shrink-0 whitespace-nowrap">
              i can't stop thinking about ways to make everything better
            </li>
            <li class="shrink-0 whitespace-nowrap">
              point me in a direction and i'll figure it out
            </li>
            <li class="shrink-0 whitespace-nowrap">
              i believe in low ego and iteration
            </li>
          </ul>
          <ul class="flex gap-16 pr-16 text-lg">
            <li class="shrink-0 whitespace-nowrap">
              i'm a senior product designer
            </li>
            <li class="shrink-0 whitespace-nowrap">
              i've worked as an independent contributor and managed teams
            </li>
            <li class="shrink-0 whitespace-nowrap">
              i do best collaborating closely with engineers and product
              managers
            </li>
            <li class="shrink-0 whitespace-nowrap">
              i can't stop thinking about ways to make everything better
            </li>
            <li class="shrink-0 whitespace-nowrap">
              point me in a direction and i'll figure it out
            </li>
            <li class="shrink-0 whitespace-nowrap">
              i believe in low ego and iteration
            </li>
          </ul>
        </div>
      </div>
      <!-- marquee ends -->

      <div class="flex w-full flex-col items-center gap-8 p-8">
        <!-- Overview starts -->
        <div class="flex w-full flex-col items-center gap-8 p-8">
          <div class="scanline-container w-full max-w-lg p-5">
            <h3 class="text-lg font-semibold">What I'm up to</h3>
            <ul class="pl-5">
              <li>
                Working on developer productivity tools at GitLab with the
                <a
                  class="generic-link"
                  href="https://handbook.gitlab.com/handbook/engineering/development/dev/create/editor-extensions/"
                  >Editor Extensions team</a
                >
              </li>
              <li>
                Focused on end-to-end experiences around
                <a
                  class="generic-link"
                  href="https://about.gitlab.com/gitlab-duo/">GitLab Duo</a
                > (generative AI + agents), security scanning, and platform features
                in the IDE
              </li>
              <li>
                Previously with the Remote Development team working on
                <a
                  class="generic-link"
                  href="https://about.gitlab.com/direction/create/remote_development/workspaces/"
                  >Workspaces</a
                > (Cloud Development Environments) and the <a
                  class="generic-link"
                  href="https://about.gitlab.com/direction/create/remote_development/web_ide/"
                >
                  GitLab Web IDE</a
                >
              </li>
            </ul>

            <h3 class="pt-2 text-lg font-semibold">Previous</h3>
            <ul class="pl-5">
              <li>Enterprise security scanning tools (Synopsys)</li>
              <li>Automated legal contracts (LegalTech SAAS)</li>
            </ul>
          </div>

          <!-- newsletter signup starts -->
          <!-- <div class="scanline-container w-full max-w-lg p-5">
            <h3 class="text-center">Join the newsletter</h3>
            <label for="email" class="block text-sm font-medium text-gray-300"
              >Email</label
            >
            <div class="flex w-full flex-col gap-1 sm:flex-row">
              <input
                type="email"
                id="email"
                name="email"
                required
                class="block w-full min-w-36 border-4 border-gray-700 border-l-gray-500 border-t-gray-500 bg-black p-2 text-white focus:border-blue-500 focus:ring-blue-500 sm:min-w-72"
                placeholder="you@example.com"
              />
              <button
                type="submit"
                class="glitch-button block w-full border-4 border-gray-700 border-l-gray-500 border-t-gray-500 bg-white/10 p-2 text-white hover:bg-black focus:border-blue-500 focus:ring-blue-500 sm:max-w-24"
                >Submit</button
              >
            </div>
          </div> -->

          <!-- secondary content starts -->
          <div class="w-full max-w-lg">
            <div class="grid w-full grid-cols-1 gap-4 sm:grid-cols-3">
              <div class="scanline-container p-5">
                <h4 class="mb-3 text-sm font-medium text-gray-300">WORK</h4>
                <a class="generic-link" href="https://gitlab.com/tvanderhelm"
                  >gitlab</a
                >
              </div>
              <div class="scanline-container p-5">
                <h4 class="mb-3 text-sm font-medium text-gray-300">PROJECTS</h4>
                <ul class="no-bullet-list">
                  <li>
                    <a class="generic-link" href="https://github.com/tayv"
                      >github</a
                    >
                  </li>
                  <li>
                    <a class="generic-link" href="https://github.com/tayv"
                      >parkadoo</a
                    >
                  </li>

                  <li>
                    <a
                      class="generic-link"
                      href="https://bubblegumui.vercel.app/">bubblegum ui</a
                    >
                  </li>
                </ul>
              </div>
              <div class="scanline-container p-5">
                <h4 class="mb-3 text-sm font-medium text-gray-300">CONTACT</h4>
                <ul class="no-bullet-list">
                  <li>
                    <a
                      class="generic-link"
                      href="https://linkedin.com/in/taylorvanderhelm"
                      >linkedin</a
                    >
                  </li>
                </ul>
              </div>
            </div>
          </div>

          <!-- Card Grid -->
          <!-- <div
            class="grid w-full grid-cols-1 gap-6 sm:grid-cols-2 xl:grid-cols-3"
          >
            {
              cards.map((card) => (
                <div
                  class="scanline-container group cursor-pointer overflow-hidden p-0"
                  data-card={card.id}
                >
                  <div class="relative">
                    <img
                      src={card.imageSrc}
                      alt={card.imageAlt}
                      class="w-full object-cover transition-transform duration-300 group-hover:scale-105"
                    />
                    <div class="absolute inset-0 bg-gradient-to-br from-pink-500/30 via-purple-500/20 to-blue-500/40 mix-blend-multiply" />
                  </div>
                  <div class="relative z-10 -mt-16 p-4 pt-20">
                    <h3 class="mb-2 text-xl font-bold">{card.title}</h3>
                    <p class="text-gray-300">{card.content}</p>
                  </div>
                </div>
              ))
            }
          </div> -->
        </div>

        <!-- Full-screen Dialogs -->
        {cards.map((card) => <CardDialog {...card} />)}
      </div>

      <script>
        document.addEventListener("DOMContentLoaded", () => {
          // Add click handlers to all cards
          const cards = document.querySelectorAll("[data-card]")
          cards.forEach((card) => {
            card.addEventListener("click", () => {
              const cardId = card.getAttribute("data-card")
              if (cardId) {
                openDialog(cardId)
              }
            })
          })

          // Add click handlers to all close buttons
          const closeButtons = document.querySelectorAll("[data-close]")
          closeButtons.forEach((button) => {
            button.addEventListener("click", (e) => {
              e.stopPropagation() // Prevent event from bubbling up
              const dialogId = button.getAttribute("data-close")
              if (dialogId) {
                closeDialog(dialogId)
              }
            })
          })

          // Add keyboard support for closing dialogs
          document.addEventListener("keydown", (e) => {
            if (e.key === "Escape") {
              const openDialog = document.querySelector(
                "dialog[open]"
              ) as HTMLDialogElement
              if (openDialog) {
                openDialog.close()
                document.body.style.overflow = "auto"
              }
            }
          })
        })

        function openDialog(id) {
          const dialog = document.getElementById(id) as HTMLDialogElement
          if (dialog) {
            dialog.showModal()
            document.body.style.overflow = "hidden"
          }
        }

        function closeDialog(id) {
          const dialog = document.getElementById(id) as HTMLDialogElement
          if (dialog) {
            dialog.close()
            document.body.style.overflow = "auto"
          }
        }

        // Close dialog when clicking outside
        document.addEventListener("click", (e) => {
          const dialogs = document.querySelectorAll("dialog")
          dialogs.forEach((dialog) => {
            const dialogElement = dialog as HTMLDialogElement
            const rect = dialogElement.getBoundingClientRect()
            const isInDialog =
              rect.top <= e.clientY &&
              e.clientY <= rect.top + rect.height &&
              rect.left <= e.clientX &&
              e.clientX <= rect.left + rect.width
            if (dialogElement.open && !isInDialog) {
              dialogElement.close()
              document.body.style.overflow = "auto"
            }
          })
        })
      </script>
    </div><style>
      /* Marquee animation */
      .animate-marquee {
        animation: scroll 60s linear infinite;
        min-width: 100%;
      }

      @keyframes scroll {
        0% {
          transform: translateX(0);
        }
        100% {
          transform: translateX(-50%);
        }
      }

      /* Glitch effect */
      .glitch-wrapper {
        width: 100%;
        height: 100px;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        position: relative;
      }

      .glitch-wrapper::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: repeating-linear-gradient(
          0deg,
          rgba(0, 0, 0, 0.15),
          rgba(0, 0, 0, 0.15) 1px,
          transparent 1px,
          transparent 2px
        );
        pointer-events: none;
        z-index: 2;
      }

      .glitch {
        position: relative;
        font-size: 40px;
        font-weight: bold;
        color: #ffffff;
        letter-spacing: 3px;
        text-shadow:
          0.05em 0 0 rgba(255, 0, 0, 0.75),
          -0.025em -0.05em 0 rgba(0, 255, 0, 0.75),
          0.025em 0.05em 0 rgba(0, 0, 255, 0.75);
      }

      .glitch::before {
        content: attr(data-text);
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 50%;
        text-shadow: -2px 0 #ff0000;
        animation: noise-1 3s infinite;
        opacity: 0.75;
        clip-path: polygon(0 0, 100% 0, 100% 45%, 0 45%);
        transform: translateX(0);
      }

      .glitch::after {
        content: attr(data-text);
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        text-shadow: -2px 0 #00ff00;
        animation: noise-2 3s infinite;
        opacity: 0.75;
        clip-path: polygon(0 55%, 100% 55%, 100% 100%, 0 100%);
        transform: translateX(0);
      }

      @keyframes noise-1 {
        0%,
        85%,
        100% {
          transform: translateX(0);
        }
        86% {
          transform: translateX(-5px);
        }
        87% {
          transform: translateX(5px);
        }
        88% {
          transform: translateX(-3px);
        }
        89% {
          transform: translateX(0);
        }
      }

      @keyframes noise-2 {
        0%,
        85%,
        100% {
          transform: translateX(0);
        }
        86% {
          transform: translateX(5px);
        }
        87% {
          transform: translateX(-5px);
        }
        88% {
          transform: translateX(3px);
        }
        89% {
          transform: translateX(0);
        }
      }

      /* Glitch button effect */
      .glitch-button {
        position: relative;
        transition: all 0.2s ease;
      }

      .glitch-button:hover {
        text-shadow:
          0.05em 0 0 rgba(255, 0, 0, 0.75),
          -0.025em -0.05em 0 rgba(0, 255, 0, 0.75),
          0.025em 0.05em 0 rgba(0, 0, 255, 0.75);
      }

      .glitch-button:hover span {
        animation: glitch 500ms infinite;
      }

      /* Text shadow utility for better contrast */
      .text-shadow {
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
      }

      /* Scanline container matching glitch-wrapper style */
      .scanline-container {
        position: relative;
        color: white;
        background: rgba(0, 0, 0, 0.4);
      }

      .scanline-container::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: repeating-linear-gradient(
          0deg,
          rgba(0, 0, 0, 0.15),
          rgba(0, 0, 0, 0.15) 1px,
          transparent 1px,
          transparent 2px
        );
        pointer-events: none;
        z-index: 2;
      }

      .scanline-container > * {
        position: relative;
        z-index: 2;
      }

      /* Modal styles */
      .modal {
        position: fixed;
        border: none;
        padding: 0;
        width: 100%;
        height: 100%;
        max-width: 100%;
        max-height: 100%;
        background: rgba(0, 0, 0, 0.9);
      }

      .modal::backdrop {
        background: rgba(0, 0, 0, 0.9);
        backdrop-filter: blur(4px);
      }

      .modal-content {
        width: 100%;
        height: 100%;
        max-width: 1200px;
        margin: 0 auto;
        background: rgba(0, 0, 0, 0.8);
        overflow-y: auto;
        position: relative;
      }

      .modal-content::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 2px;
        background: linear-gradient(
          90deg,
          transparent,
          #ff00ff,
          #00ffff,
          transparent
        );
        animation: borderGlow 3s linear infinite;
        z-index: 10;
      }

      @keyframes borderGlow {
        0% {
          transform: translateX(-100%);
        }
        100% {
          transform: translateX(100%);
        }
      }

      .modal img {
        width: 100%;
        height: 50vh;
        object-fit: cover;
        display: block;
      }

      /* Add animation for dialog */
      @keyframes fadeIn {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      dialog[open] {
        animation: fadeIn 0.3s ease-out;
      }

      /* Modal content specific styles */
      .modal-scanline {
        position: relative;
        color: white;
        background: rgba(0, 0, 0, 0.2);
      }

      .modal-scanline::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: repeating-linear-gradient(
          0deg,
          rgba(0, 0, 0, 0.15),
          rgba(0, 0, 0, 0.15) 1px,
          transparent 1px,
          transparent 2px
        );
        pointer-events: none;
        z-index: 2;
      }

      .modal-scanline > * {
        position: relative;
        z-index: 2;
      }

      .modal-text {
        padding: 2rem;
      }
    </style>
  </body>
</html>
